%{
	#include "Contracts.hpp"
	#include "Utils.hpp"
	#include "SymbolTable.h"
	#include <iostream>
	#include <stdlib.h>

	using namespace std;

	extern int yylex();
	int yyerror(char * message);
	void addFunc(STYPE id, STYPE ret);
	extern int yylineno;
	SymbolTable* symbolTable;
%}

%token VOID INT BYTE B BOOL TRUE FALSE RETURN IF WHILE SWITCH CASE BREAK COLON SC COMMA LPAREN LBRACE RBRACE ID NUM STRING EOFF

%nonassoc RPAREN /* solving dangling-else problem */
%nonassoc ELSE /* solving dangling-else problem */

%right ASSIGN
%left OR
%left AND
%left RELOP
%left BINOP
%right NOT

%%

S : M Program EOFF {symbolTable->EndProg(); exit(1);}
;

Program	: Funcs
          {
			
            if(!symbolTable->IsMainDefined)
            {
                output::errorMainMissing();
                exit(0);
            }
            
          }
	;

Funcs : FuncDecl Funcs | /*epsilon*/
	;

FuncDecl : RetType ID LPAREN Formals RPAREN {addFunc($2,$1);} LBRACE V Statements RBRACE
           {
                if($1.type != symbolTable->ReturnType)
                {
                    output::errorMismatch(yylineno);
                    exit(0);
                }
                if($1.type == _VOID && $2.varName == MAIN && symbolTable->formalList.argTypes.size() == 0)
                    symbolTable->IsMainDefined = true;
				symbolTable->EndScope();
                symbolTable->FlushFormalList();
                symbolTable->ReturnType = _VOID;
           }
    ;

RetType : Type
          {
                $$.type = $1.type;
          } |
          VOID { $$.type = _VOID;}
    ;

Formals : FormalsList | /*epsilon*/
    ;

FormalsList : FormalDecl |
              FormalDecl COMMA FormalsList
    ;

FormalDecl : Type ID
             {
                symbolTable->AddToFormalList($2.varName,$1.type);
             }
    ;

Statements : Statement {$$.type = $1.type;} | Statements Statement {$$.type = $2.type;}
    ;

Statement : V LBRACE M Statements RBRACE {symbolTable->EndScope();} |
            Type ID SC
            {
                if(symbolTable->IsWhileOrIfIntact)
                {
                    symbolTable->OpenScope();
                    symbolTable->IsWhileOrIfScopeOpened = true;
                }
                symbolTable->IsWhileOrIfIntact = false;
                varType out;
                if(symbolTable->GetVar($2.varName,out))
                {
                    output::errorDef(yylineno,$2.varName.c_str());
                    exit(0);
                }
                symbolTable->AddVar($2.varName,$1.type);
            } |
            Type ID ASSIGN Exp SC
            {
                if(symbolTable->IsWhileOrIfIntact)
                {
					
                    symbolTable->OpenScope();
                    symbolTable->IsWhileOrIfScopeOpened = true;
                }
                symbolTable->IsWhileOrIfIntact = false;
                if(!areEqualTypes($1.type,$4.type))
                {
                    output::errorMismatch(yylineno);
                    exit(0);
                }
                varType out;
                if(symbolTable->GetVar($2.varName,out))
                {
                    output::errorDef(yylineno,$2.varName.c_str());
                    exit(0);
                }
                symbolTable->AddVar($2.varName,$1.type);
            } |
            ID ASSIGN Exp SC
            {
                varType out;
                if(!symbolTable->GetVar($1.varName,out))
                {
                    output::errorUndef(yylineno,$1.varName.c_str());
                    exit(0);
                }
                if(isByte(out) && isNumeric($3.type) && $3.numVal > MAXBYTE)
                {
                    char* str = toString($3.numVal); //TODO: try to find a better intToString
                    output::errorByteTooLarge(yylineno,str);
                    free(str); //TODO: i'm crying
                    exit(0);
                }
                if(out == $3.type || (out == _INT && $3.type == _BYTE))
                    $$.type = out;

                else
                {
                    output::errorMismatch(yylineno);
                    exit(0);
                }
            } |
            Call SC {$$.type = $1.type;} |
            RETURN SC
            {
                if(symbolTable->ReturnType != _VOID)
                {
                    output::errorMismatch(yylineno);
                    exit(0);
                }
            } |
            RETURN Exp SC
            {
                if($2.type == _STRING)
                {
                    varType out;
                    if(symbolTable->GetVar($2.varName,out))
                        if(out != symbolTable->ReturnType)
                        {
                            output::errorMismatch(yylineno);
                            exit(0);
                        }
                }
                if(symbolTable->ReturnType != $2.type)
                {
                    output::errorMismatch(yylineno);
                    exit(0);
                }
            } |
            IF LPAREN Exp RPAREN K Statement
            {
                if(!isBoolean($3.type))
                {
                    output::errorMismatch(yylineno);
                    exit(0);
                }
                if(symbolTable->IsWhileOrIfScopeOpened)
                {
                    symbolTable->EndScope();
                    symbolTable->IsWhileOrIfScopeOpened = false;
                }
                $$.type = $6.type;
            } |
            IF LPAREN Exp RPAREN K Statement ELSE K Statement
            {
                if(!isBoolean($3.type))
                {
                    output::errorMismatch(yylineno);
                    exit(0);
                }
                if(symbolTable->IsWhileOrIfScopeOpened)
                {
                    symbolTable->EndScope();
                    symbolTable->IsWhileOrIfScopeOpened = false;
                }
                $$.type = $9.type;
            } |
            WHILE LPAREN Exp RPAREN W Statement
            {
                if(!isBoolean($3.type))
                {
                    output::errorMismatch(yylineno);
                    exit(0);
                }
                symbolTable->WhileCount--;
                if(symbolTable->IsWhileOrIfScopeOpened)
                {
                    symbolTable->EndScope();
                    symbolTable->IsWhileOrIfScopeOpened = false;
                }
            } |
            BREAK SC
            {
                if(symbolTable->WhileCount <= 0)
                {
                    output::errorUnexpectedBreak(yylineno);
                    exit(0);
                }
            } |
            SWITCH LPAREN Exp RPAREN LBRACE CaseList RBRACE SC
            {
                if(!isNumeric($3.type))
                {
                    output::errorMismatch(yylineno);
                    exit(0);
                }
            }
    ;

CaseList : CaseStat CaseList | CaseStat
    ;

CaseStat : CASE NUM COLON Statement BREAK SC |
           CASE NUM B COLON Statement BREAK SC
    ;

Call : ID LPAREN ExpList RPAREN
        {
            if($1.varName == LIBPRINT)
            {
                if((symbolTable->expList.size() != 1) || !isString(symbolTable->expList.back()))
                {
                    std::vector<const char*> stringVec;
                    stringVec.push_back("string");
                    output::errorPrototypeMismatch(yylineno,LIBPRINT,stringVec);
                    exit(0);
                }
                $$.type = _VOID;
                symbolTable->FlushExpList();
            }
            else if($1.varName == LIBPRINTI)
            {
                if((symbolTable->expList.size() != 1) || !isNumeric(symbolTable->expList.back()))
                {
                    std::vector<const char*> intVec;
                    intVec.push_back("int");
                    output::errorPrototypeMismatch(yylineno,LIBPRINT,intVec);
                    exit(0);
                }
                $$.type = _VOID;
                symbolTable->FlushExpList();
            }
            else
            {
                vector<varType> expected;
                varType retType;
                SymbolTableResult res = symbolTable->CallFunc($1.varName,expected,retType);
                if(res == PROTOTYPE_MISMATCH)
                {
                    output::errorPrototypeMismatch(yylineno,$1.varName.c_str(),getTypeNames(expected));
                    exit(0);
                }
                if(res == NOT_DEFINED)
                {
                    output::errorUndef(yylineno,$1.varName.c_str());
                    exit(0);
                }
                $$.type = retType;
                symbolTable->FlushExpList();
            }
        } |
        ID LPAREN RPAREN
        {
            vector<varType> expected;
            varType retType;
            SymbolTableResult res = symbolTable->CallFunc($1.varName,expected,retType);
            if(res == PROTOTYPE_MISMATCH)
            {
                output::errorPrototypeMismatch(yylineno,$1.varName.c_str(),getTypeNames(expected));
                exit(0);
            }
            if(res == NOT_DEFINED)
            {
                output::errorUndef(yylineno,$1.varName.c_str());
                exit(0);
            }
            $$.type = $1.type;
        }
    ;

ExpList : Exp
          {
            symbolTable->AddToExpList($1.type);
          } |
          Exp COMMA ExpList
          {
            symbolTable->AddToExpList($1.type);
          }
    ;

Type : INT {$$.type = _INT;} | BYTE {$$.type = _BYTE;} | BOOL {$$.type = _BOOL;} |
       STRING
       {
            output::errorMismatch(yylineno);
            exit(0);
       }
    ;

Exp : LPAREN Exp RPAREN {$$.type = $2.type;} |
      ID
      {
            varType type;
            bool result = symbolTable->GetVar($1.varName,type);
            if(!result)
            {
                output::errorUndef(yylineno,$1.varName.c_str());
                exit(0);
            }
            $$.type = _STRING;
      } |
      Call {$$.type = $1.type;} |
      NUM {$$.type = _INT; $$.numVal = $1.numVal;} |
      NUM B {$$.type = _BYTE; $$.numVal = $1.numVal;} |
      STRING {$$.type = _STRING; $$.stringVal = $1.stringVal;} |
      TRUE {$$.type = _BOOL; $$.boolVal = $1.boolVal;} |
      FALSE {$$.type = _BOOL; $$.boolVal = $1.boolVal;} |
      NOT Exp
      {
            if(!isBoolean($1.type))
            {
                output::errorMismatch(yylineno);
                exit(0);
            }
            $$.type = $1.type;
            $$.boolVal = !$1.boolVal;
      } |
      Exp AND Exp
      {
            if(!isBoolean($1.type) || !areEqualTypes($1.type,$3.type))
            {
                //output::errorMismatch(yylineno);
                exit(0);
            }
            $$.type = $1.type;
            $$.boolVal = $1.boolVal && $3.boolVal;
      } |
      Exp OR Exp
      {
            if(!isBoolean($1.type) || !areEqualTypes($1.type,$3.type))
            {
                output::errorMismatch(yylineno);
                exit(0);
            }
            $$.type = $1.type;
            $$.boolVal = $1.boolVal || $3.boolVal;
      } |
      Exp RELOP Exp
      {
            if(!isNumeric($1.type) || !areEqualTypes($1.type,$3.type))
            {
                output::errorMismatch(yylineno);
                exit(0);
            }
            $$.type = _BOOL;
      } |
      Exp BINOP Exp
      {
            if(!isNumeric($1.type) || !isNumeric($3.type))
            {
                output::errorMismatch(yylineno);
                exit(0);
            }
            $$.type = ($1.type == _BYTE) ? $3.type : $1.type;
      }
    ;

M : { symbolTable->OpenScope();}
    ;



W : {
        symbolTable->WhileCount++;
        symbolTable->IsWhileOrIfIntact = true;
    }
    ;

K : { symbolTable->IsWhileOrIfIntact = true;}
    ;

V : {symbolTable->IsWhileOrIfIntact = false;}
    ;

%%

int main(){
	symbolTable = new SymbolTable();
	yyparse();
}

int yyerror(char * message){
	output::errorSyn(yylineno);
	exit(0);
}

void addFunc(STYPE id, STYPE ret){
    if(ret.type != _INT && ret.type != _BOOL && ret.type != _BYTE && ret.type != _VOID)
    {
        output::errorMismatch(yylineno);
        exit(0);
    }
    SymbolTableResult res = symbolTable->AddFunc(id.varName,ret.type);
    if(res == FAIL)
    {
        output::errorDef(yylineno,id.varName.c_str());
        exit(0);
    }
    symbolTable->ReturnType = ret.type;
}


