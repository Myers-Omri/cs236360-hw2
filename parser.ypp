%{
	#include "Contracts.hpp"
	#include "Utils.hpp"
	#include "output.hpp"
	#include "SymbolTable.h"
	#include <iostream>
	#include <stdlib.h>

	using namespace std;

	extern int yylex();
	int yyerror(char * message);
	extern int yylineno;
	SymbolTable* symbolTable;
%}

%token VOID INT BYTE B BOOL TRUE FALSE RETURN IF WHILE SWITCH CASE BREAK COLON SC COMMA LPAREN LBRACE RBRACE ID NUM STRING

%nonassoc RPAREN /* solving dangling-else problem */
%nonassoc ELSE /* solving dangling-else problem */

%right ASSIGN
%left OR
%left AND
%left RELOP
%left BINOP
%right NOT

%%

Program	: Funcs
          {
            symbolTable->EndProg();
          }
	;

Funcs : FuncDecl Funcs
        {

        } | /*epsilon*/
	;

FuncDecl : RetType ID LPAREN Formals RPAREN LBRACE M Statements RBRACE
           {
                funcType fType;
                fType.retType = $1.type;
                fType.args = $4.formalTypes;
                SymbolTableResult res = symbolTable->AddFunc($2.varName,fType);
                if(res == FAIL)
                {
                    output::errorDef(yylineno,$2.varName.c_str());
                    exit(0);
                }
                symbolTable->EndProg();
           }
    ;

RetType : Type {$$.type = $1.type;} | VOID { $$.type = _VOID;}
    ;

Formals : FormalsList
          {
            $$.formalTypes.push_back($1.type);
          } | /*epsilon*/
    ;

FormalsList : FormalDecl
              {
                $$.formalTypes.push_back($1.type);
              } |
              FormalDecl COMMA FormalsList
              {
                $$.formalTypes.push_back($1.type);
              }

    ;

FormalDecl : Type ID
             {
                $$.formalTypes.push_back($1.type);
             }
    ;

Statements : Statement {$$.type = $1.type;} | Statements Statement {$$.type = $2.type;}
    ;

Statement : LBRACE M Statements RBRACE {symbolTable->EndProg();} |
            Type ID SC
            {
                if(!symbolTable->AddVar($2.varName,$1.type))
                {
                    output::errorDef(yylineno,$2.varName.c_str());
                    exit(0);
                }
            }
            Type ID ASSIGN Exp SC
            {
                if(!symbolTable->AddVar($2.varName,$1.type))
                {
                    output::errorDef(yylineno,$2.varName.c_str());
                    exit(0);
                }
                if(!areEqualTypes($1.type,$4.type);
                {
                    output::errorMismatch(yylineno);
                    exit(0);
                }
            }
            ID ASSIGN Exp SC
            {
                varType t;
                if(!symbolTable->GetVar($1.varName,t))
                {
                    output::errorUndef(yylineno,$1.varName.c_str());
                    exit(0);
                }
                if(isByte(t.type) && isNumeric($3.type) && $3.numVal > MAXBYTE)
                {
                    char* str = toString($3.numVal); //TODO: try to find a better inToString
                    output::errorByteTooLarge(yylineno,str);
                    free(str); //TODO: i'm crying
                    exit(0);
                }
                if(t.type == $3.type || (t.type == _INT && $3.type == _BYTE))
                    $$.type = t.type;
                else
                {
                    output::errorMismatch(yylineno);
                    exit(0);
                }
            } |
            Call SC |
            RETURN SC {$$.type = _VOID;} |
            RETURN Exp SC {$$.type = $1.type;} |
            IF LPAREN Exp RPAREN Statement |
            IF LPAREN Exp RPAREN Statement ELSE Statement |
            WHILE LPAREN Exp RPAREN Statement |
            BREAK SC |
            SWITCH LPAREN Exp RPAREN LBRACE CaseList RBRACE SC
    ;

CaseList : CaseStat CaseList | CaseStat
    ;

CaseStat : CASE NUM COLON Statement BREAK SC |
           CASE NUM B COLON Statement BREAK SC
    ;

Call : ID LPAREN ExpList RPAREN
        {
            vector<varType> args;
            SymbolTableResult res = symbolTable->CallFunc($1.varName,args);
            if(res == PROTOTYPE_MISMATCH)
            {
                output::errorPrototypeMismatch(yylineno,$1.varName.c_str(),getTypeNames(args));
                exit(0);
            }
            if(res == NOT_DEFINED)
            {
                output::errorUndef(yylineno,$1.varName.c_str());
                exit(0);
            }
            $$.type = $1.type;
        } |
        ID LPAREN RPAREN
        {
            vector<varType> args;
            SymbolTableResult res = symbolTable->CallFunc($1.varName,args);
            if(res == PROTOTYPE_MISMATCH)
            {
                output::errorPrototypeMismatch(yylineno,$1.varName.c_str(),getTypeNames(args));
                exit(0);
            }
            if(res == NOT_DEFINED)
            {
                output::errorUndef(yylineno,$1.varName.c_str());
                exit(0);
            }
            $$.type = $1.type;
        }
    ;

ExpList : Exp
          {
            $$.type = $1.type;
            $$.expTypes.push_back($1.type);
          } |
          Exp COMMA ExpList
          {
            $$.expTypes.push_back($1.type);
          }
    ;

Type : INT {$$.type = _INT;} | BYTE {$$.type = _BYTE;} | BOOL {$$.type = _BOOL;}
    ;

Exp : LPAREN Exp RPAREN {$$.type = $2.type;} |
      ID
      {
        $$.type = $1.type;
        $$.varName = $1.varName;
      } |
      Call {$$.type = $1.type;} |
      NUM {$$.type = _INT; $$.numVal = $1.numVal;} |
      NUM B {$$.type = _BYTE; $$.numVal = $1.numVal;} |
      STRING {$$.type = _STRING; $$.stringVal = $1.stringVal;} |
      TRUE {$$.type = _BOOL; $$.boolVal = $1.boolVal;} |
      FALSE {$$.type = _BOOL; $$.boolVal = $1.boolVal;} |
      NOT Exp
      {
            if(!isBoolean($1))
            {
                output::errorMismatch(yylineno);
                exit(0);
            }
            $$.type = $1.type;
            $$.boolVal = !$1.boolVal;
      } |
      Exp AND Exp
      {
            if(!isBoolean($1) || !areEqualTypes($1,$3))
            {
                //output::errorMismatch(yylineno);
                exit(0);
            }
            $$.type = $1.type;
            $$.boolVal = $1.boolVal && $3.boolVal;
      } |
      Exp OR Exp
      {
            if(!isBoolean($1) || !areEqualTypes($1,$3))
            {
                output::errorMismatch(yylineno);
                exit(0);
            }
            $$.type = $1.type;
            $$.boolVal = $1.boolVal || $3.boolVal;
      } |
      Exp RELOP Exp
      {
            if(!isNumeric($1) || !areEqualTypes($1,$3))
            {
                output::errorMismatch(yylineno);
                exit(0);
            }
            $$.type = _BOOL;
      } |
      Exp BINOP Exp
      {
            if(!isNumeric($1) || !isNumeric($3))
            {
                output::errorMismatch(yylineno);
                exit(0);
            }
            $$.type = ($1.type == _BYTE) ? $3.type : $1.type;
      }
    ;

M : { symbolTable->OpenScope();}
    ;
%%

int main()
{
	symbolTable = new SymbolTable();
	yyparse();
}

int yyerror(char * message)
{
	cout<<"Parse error: "<<message<<endl;
	exit(0);
}